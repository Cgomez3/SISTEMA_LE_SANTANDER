/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Capa_ProgPago;

import Capa_Entidades.EComprobante;
import Capa_Entidades.EConsolidado;
import Capa_Entidades.EExportado;
import Capa_Entidades.EProgPagosCabecera;
import Capa_Entidades.ExportacionInterbank;
import Capa_Logica.LImportar;
import Capa_Logica.LParametro;
import Capa_Logica.LProgPagosCabecera;
import Capa_Logica.SesionUsuario;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.Permission;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author EXPERTYA
 */
public class Exportartxt extends javax.swing.JInternalFrame {

    ArrayList<EConsolidado> lstconsolidado = new ArrayList<>();
    ArrayList<EComprobante> lstdetalle = new ArrayList();
    ArrayList<EProgPagosCabecera> lstcabecera = new ArrayList<>();
    String titulos[] = {"CodProg", "Estado", "Fecha", "Banco", "Moneda", "NroCuentaOrigen"};
    DefaultTableModel modTbdatos = new DefaultTableModel(titulos, 0);
    String titulos2[] = {"CodProg", "DocProveedor", "RazonSocial", "PagarSoles", "PagarDolares", "Mensaje"};
    DefaultTableModel modTbdatos2 = new DefaultTableModel(titulos2, 0);
    String titulos3[] = {"CodProg", "CodCompr", "TipoComprobante", "NumComp", "Fecha", "DocProv", "Glosa", "CompSujeto",
        "FormaPago", "MontoSoles", "MontoDolares", "Estado", "Banco", "Moneda", "CtaBancaria"};
    DefaultTableModel modTbdatos3 = new DefaultTableModel(titulos3, 0);
    DecimalFormatSymbols simbolo = new DecimalFormatSymbols();

    /**
     * Creates new form Exportartxt
     */
    public Exportartxt() {
        initComponents();
        tbcabprogramacion.setModel(modTbdatos);
        llenarcab();
        tblstdetprogramacion.setModel(modTbdatos3);
        this.setTitle("Exportar ProgramaciÃ³n de Pagos.");
        setFrameIcon(new ImageIcon(getClass().getResource("/img/Santander.png")));
        tblstdetprogramacion.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        simbolo.setDecimalSeparator('.');
        simbolo.setGroupingSeparator(',');
        Date hoy = new Date();
        dcfecha.setDate(hoy);
        txtruta.setText(SesionUsuario.bddatos.getRuta());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void llenarcab() {
        LProgPagosCabecera lo = new LProgPagosCabecera();
        Calendar cal = Calendar.getInstance();
        lstcabecera = lo.ListaxFecha("01-01-2013", "30-12-" + Integer.toString(cal.get(Calendar.YEAR)));
        if (lstcabecera.size() > 0) {
            listacomprobante();

        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron registros.");
            lstcabecera.removeAll(lstcabecera);
            listacomprobante();
        }
    }

    private void listacomprobante() {
        modTbdatos.setRowCount(0);
        if (lstcabecera.size() > 0) {
            for (int i = 0; i < lstcabecera.size(); i++) {
                EProgPagosCabecera at;
                at = lstcabecera.get(i);
                Object nuevafila[] = new Object[6];
                nuevafila[0] = at.getCod_programacion();
                nuevafila[1] = at.getEstado_progpagos();
                nuevafila[2] = at.getFecha();
                nuevafila[3] = at.getBanco();
                nuevafila[4] = at.getMoneda();
                nuevafila[5] = at.getNumCuenta();
                modTbdatos.addRow(nuevafila);
            }
        }
        tbcabprogramacion.setModel(modTbdatos);
        lblnumscabprog.setText(tbcabprogramacion.getRowCount() + " Registro(s)");
    }

    private void listadetalle() {
        modTbdatos3.setRowCount(0);
        if (lstdetalle.size() > 0) {
            for (int i = 0; i < lstdetalle.size(); i++) {
                Object nuevafila[] = new Object[15];
                nuevafila[0] = lstdetalle.get(i).getCodProgramacion();
                nuevafila[1] = lstdetalle.get(i).getCodComprobante();
                nuevafila[2] = lstdetalle.get(i).getTipoComprobante();
                nuevafila[3] = lstdetalle.get(i).getNumComprobante();
                nuevafila[4] = lstdetalle.get(i).getFechaComprobante();
                nuevafila[5] = lstdetalle.get(i).getDocProveedor();
                nuevafila[6] = lstdetalle.get(i).getGlosaComprante();
                nuevafila[7] = lstdetalle.get(i).getComprobanteSujeto();
                nuevafila[8] = lstdetalle.get(i).getFormaPago();
                nuevafila[9] = lstdetalle.get(i).getMontoPagar();
                nuevafila[10] = lstdetalle.get(i).getMontoPagarDOL();
                nuevafila[11] = lstdetalle.get(i).getEstado();
                nuevafila[12] = lstdetalle.get(i).getUsuModi();
                nuevafila[13] = lstdetalle.get(i).getNomMoneda();
                nuevafila[14] = lstdetalle.get(i).getCuentasoles();
                modTbdatos3.addRow(nuevafila);
            }
        }
        tblstdetprogramacion.setModel(modTbdatos3);
        lblnumdetalleprog.setText(tblstdetprogramacion.getRowCount() + " Registro(s)");
    }

    private String nombreproveedor(String nomprov) {
        String retorno = "";
        retorno = String.format("%1$-75s", nomprov);
        return retorno;
    }

    String fechaformato(Date fecha) {
        String fec = new SimpleDateFormat("dd-MM-yyyy").format(fecha);
        return fec;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btnsalir1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbcabprogramacion = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        lblnumscabprog = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblstdetprogramacion = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lblnumdetalleprog = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtruta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dcfecha = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jPanel2.setBackground(new java.awt.Color(255, 0, 15));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EXPORTAR PROGRAMACION DE PAGOS");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/export.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnsalir1.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        btnsalir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salir.png"))); // NOI18N
        btnsalir1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        btnsalir1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnsalir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalir1ActionPerformed(evt);
            }
        });

        tbcabprogramacion.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        tbcabprogramacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbcabprogramacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbcabprogramacionMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbcabprogramacion);

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        lblnumscabprog.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        lblnumscabprog.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblnumscabprog.setText("0 Registro (s).");

        jLabel4.setBackground(new java.awt.Color(255, 204, 0));
        jLabel4.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CABECERA DE PROGRAMACIÃN");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblnumscabprog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblnumscabprog)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        tblstdetprogramacion.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        tblstdetprogramacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblstdetprogramacion);

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        jLabel5.setBackground(new java.awt.Color(255, 204, 0));
        jLabel5.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("DETALLE DE PROGRAMACIÃN");

        lblnumdetalleprog.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        lblnumdetalleprog.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblnumdetalleprog.setText("0 Registro (s).");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblnumdetalleprog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblnumdetalleprog))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        jLabel2.setText("Ruta");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 8, 22, 14);

        txtruta.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        txtruta.setEnabled(false);
        txtruta.setMinimumSize(new java.awt.Dimension(100, 20));
        jPanel1.add(txtruta);
        txtruta.setBounds(40, 5, 470, 20);

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        jLabel3.setText("Fecha");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(520, 7, 28, 14);

        dcfecha.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        jPanel1.add(dcfecha);
        dcfecha.setBounds(560, 4, 105, 22);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsalir1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnsalir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DecimalFormat formato = new DecimalFormat("#####0.00", simbolo);
        if (txtruta.getText().trim().length() > 0) {
            String nombrearchivo = "";
            String InicialesBanco = "";
            int fila = tbcabprogramacion.getSelectedRow();
            String lafecha = fechaformato(dcfecha.getDate());
            String mimoneda = tbcabprogramacion.getValueAt(fila, 4).toString();
            String miBanco = tbcabprogramacion.getValueAt(fila, 3).toString();
            switch (miBanco) {
                case "BCP":
                    InicialesBanco = "BCP_" + mimoneda.toUpperCase() + "_";
                    break;
                case "Interbank":
                    InicialesBanco = "IBK_" + mimoneda.toUpperCase() + "_";
                    break;
                default:
                    break;
            }
            int micodigo = Integer.valueOf(tbcabprogramacion.getValueAt(fila, 0).toString());
            EExportado objexp = new EExportado();
            objexp.setCodProgramacion(micodigo);
            objexp.setFecha(lafecha);
            objexp.setMoneda(mimoneda);
            int ultimoslash = txtruta.getText().trim().lastIndexOf("\\") + 1;
            if (ultimoslash > 0) {
                Date fechanow = new Date();
                nombrearchivo = miBanco + "" + txtruta.getText().trim().substring(ultimoslash, txtruta.getText().trim().length());
                String nomArchivoCompleto = InicialesBanco + "" + fechaformato(fechanow) + "" + fechanow.getHours() + fechanow.getMinutes() + "" + fechanow.getSeconds() + ".txt";
                String rutaCompleta = txtruta.getText().trim().concat("\\").concat(fechaformato(fechanow));
//              File archivo=new File(txtruta.getText().trim()+ nomArchivoCompleto);  
                File carpeta = new File(txtruta.getText());
                if (carpeta.exists()) {
                    carpeta = new File(rutaCompleta);
                    if (!carpeta.exists()) {
                        if (!carpeta.mkdir()) {
                            JOptionPane.showMessageDialog(this, ("La Carpeta: (").concat(txtruta.getText().trim().substring(ultimoslash, txtruta.getText().trim().length())).concat(") esta protegida contra escritura."));
                            return;
                        };
                    }
                } else {
                    JOptionPane.showMessageDialog(this, ("La Ruta: ").concat(txtruta.getText()).concat(" no existe."));
                    return;
                }
                File archivo = new File(rutaCompleta.concat("\\").concat(nomArchivoCompleto));

                if ("BCP".equals(miBanco)) {
                    if (validarCuentaBancaria().length() > 0) {
                        JOptionPane.showMessageDialog(this, validarCuentaBancaria());
                    } else {

                        try {
                            LImportar lim = new LImportar();
                            LParametro lp = new LParametro();
                            FileWriter escribir = new FileWriter(archivo, true);
                            escribir.write("1");
                            ArrayList<String> nroscta = new ArrayList<>();
                            String totalconsolidado = lstconsolidado.size() + "";
                            if (totalconsolidado.length() == 1) {
                                totalconsolidado = "00000" + totalconsolidado;
                            }
                            if (totalconsolidado.length() == 2) {
                                totalconsolidado = "0000" + totalconsolidado;
                            }
                            if (totalconsolidado.length() == 3) {
                                totalconsolidado = "000" + totalconsolidado;
                            }
                            String fecha = fechaformato(dcfecha.getDate());
                            fecha = fecha.substring(6, 10) + fecha.substring(3, 5) + fecha.substring(0, 2);
                            String nrocta = tbcabprogramacion.getValueAt(fila, 5).toString();
                            String moneda = tbcabprogramacion.getValueAt(fila, 4).toString();
                            escribir.write(totalconsolidado + fecha + "C");
                            System.out.println(nrocta.length());
                            nroscta.add(fecha);
                            if (moneda.equalsIgnoreCase("SOLES")) {
                                escribir.write("0001");
                            } else {
                                escribir.write("1001");
                            }
                            if (nrocta.length() == 8) {
                                nrocta = "00000" + nrocta;
                            }
                            if (nrocta.length() == 9) {
                                nrocta = "0000" + nrocta;
                            }
                            if (nrocta.length() == 10) {
                                nrocta = "000" + nrocta;
                            }
                            if (nrocta.length() == 11) {
                                nrocta = "00" + nrocta;
                            }
                            if (nrocta.length() == 12) {
                                nrocta = "0" + nrocta;
                            }
                            if (nrocta.length() == 14) {
                                nrocta = "000" + nrocta;
                            }
                            if (nrocta.length() == 15) {
                                nrocta = "00" + nrocta;
                            }
                            if (nrocta.length() == 16) {
                                nrocta = "0" + nrocta;
                            }
                            escribir.write(nrocta + "       ");
                            double montototal = 0.00;
                            for (int i = 0; i < lstconsolidado.size(); i++) {
                                if (moneda.equalsIgnoreCase("SOLES")) {
                                    montototal = montototal + lstconsolidado.get(i).getMontosoles();
                                } else {
                                    montototal = montototal + lstconsolidado.get(i).getMontodolares();
                                }
                            }
                            String monto = formato.format(montototal) + "";
                            if (monto.length() == 4) {
                                monto = "0000000000000" + monto;
                            }
                            if (monto.length() == 5) {
                                monto = "000000000000" + monto;
                            }
                            if (monto.length() == 6) {
                                monto = "00000000000" + monto;
                            }
                            if (monto.length() == 7) {
                                monto = "0000000000" + monto;
                            }
                            if (monto.length() == 8) {
                                monto = "000000000" + monto;
                            }
                            if (monto.length() == 9) {
                                monto = "00000000" + monto;
                            }
                            if (monto.length() == 10) {
                                monto = "0000000" + monto;
                            }
                            if (monto.length() == 11) {
                                monto = "000000" + monto;
                            }
                            if (monto.length() == 12) {
                                monto = "00000" + monto;
                            }
                            escribir.write(monto + "Referencia PaP                          N");
                            LProgPagosCabecera lc = new LProgPagosCabecera();
                            String checksum = lc.ObtChecksum(Integer.valueOf(tbcabprogramacion.getValueAt(fila, 0).toString()));
                            if (checksum.trim().length() == 12) {
                                checksum = "000" + checksum;
                            }
                            if (checksum.trim().length() == 13) {
                                checksum = "00" + checksum;
                            }
                            if (checksum.trim().length() == 14) {
                                checksum = "0" + checksum;
                            }
                            escribir.write(checksum);
                            escribir.write("\r\n");
                            for (int i = 0; i < lstconsolidado.size(); i++) {
                                String nrocuenta = "";
                                for (int j = 0; j < lstdetalle.size(); j++) {
                                    if (lstconsolidado.get(i).getDocProv().equalsIgnoreCase(lstdetalle.get(j).getDocProveedor())) {
                                        if (moneda.equalsIgnoreCase("SOLES")) {
                                            nrocuenta = lstdetalle.get(j).getCuentasoles().trim();
                                        } else {
                                            nrocuenta = lstdetalle.get(j).getCuentasoles().trim();
                                        }
                                    }
                                }
                                int count = 0;
                                if (nrocuenta.trim().length() == 20) {
                                    count = 1;
                                }
                                if (nrocuenta.trim().length() == 14) {
                                    count = 2;
                                }
                                if (nrocuenta.trim().length() == 10) {
                                    nrocuenta = nrocuenta + "          ";
                                }
                                if (nrocuenta.trim().length() == 11) {
                                    nrocuenta = nrocuenta + "         ";
                                }
                                if (nrocuenta.trim().length() == 12) {
                                    nrocuenta = nrocuenta + "        ";
                                }
                                if (nrocuenta.trim().length() == 13) {
                                    nrocuenta = nrocuenta + "       ";
                                }
                                if (nrocuenta.trim().length() == 14) {
                                    nrocuenta = nrocuenta + "      ";
                                }
                                if (nrocuenta.trim().length() == 15) {
                                    nrocuenta = nrocuenta + "     ";
                                }
                                if (nrocuenta.trim().length() == 16) {
                                    nrocuenta = nrocuenta + "    ";
                                }
                                if (nrocuenta.trim().length() == 17) {
                                    nrocuenta = nrocuenta + "   ";
                                }
                                if (nrocuenta.trim().length() == 18) {
                                    nrocuenta = nrocuenta + "  ";
                                }
                                if (nrocuenta.trim().length() == 19) {
                                    nrocuenta = nrocuenta + " ";
                                }
                                escribir.write("2");
                                if (count == 0) {
                                    escribir.write("C");
                                } else {
                                    if (count == 2) {
                                        escribir.write("A");
                                    } else {
                                        escribir.write("B");
                                    }
                                }
                                escribir.write(nrocuenta + "16" + lstconsolidado.get(i).getDocProv() + "    " + nombreproveedor(lstconsolidado.get(i).getRazonSocial()));
                                escribir.write("Referencia Beneficiario " + lstconsolidado.get(i).getDocProv() + "     Ref Emp " + lstconsolidado.get(i).getDocProv() + " ");
                                if (moneda.equalsIgnoreCase("SOLES")) {
                                    escribir.write("0001");
                                } else {
                                    escribir.write("1001");
                                }
                                String totales = "";
                                if (moneda.equalsIgnoreCase("SOLES")) {
                                    totales = formato.format(lstconsolidado.get(i).getMontosoles()) + "";
                                } else {
                                    totales = formato.format(lstconsolidado.get(i).getMontodolares()) + "";
                                }
                                if (totales.length() == 4) {
                                    totales = "0000000000000" + totales;
                                }
                                if (totales.length() == 5) {
                                    totales = "000000000000" + totales;
                                }
                                if (totales.length() == 6) {
                                    totales = "00000000000" + totales;
                                }
                                if (totales.length() == 7) {
                                    totales = "0000000000" + totales;
                                }
                                if (totales.length() == 8) {
                                    totales = "000000000" + totales;
                                }
                                if (totales.length() == 9) {
                                    totales = "00000000" + totales;
                                }
                                if (totales.length() == 10) {
                                    totales = "0000000" + totales;
                                }
                                if (totales.length() == 11) {
                                    totales = "000000" + totales;
                                }
                                if (totales.length() == 12) {
                                    totales = "00000" + totales;
                                }
                                if (totales.length() == 13) {
                                    totales = "0000" + totales;
                                }
                                escribir.write(totales + "S");
                                escribir.write("\r\n");
                                for (int j = 0; j < lstdetalle.size(); j++) {
                                    if (lstconsolidado.get(i).getDocProv().equalsIgnoreCase(lstdetalle.get(j).getDocProveedor())) {
                                        escribir.write("3");
                                        if (lstdetalle.get(j).getTipoComprobante().equalsIgnoreCase("FT")) {
                                            escribir.write(lstdetalle.get(j).getTipoComprobante().substring(0, 1));
                                        } else {
                                            if (lstdetalle.get(j).getTipoComprobante().equalsIgnoreCase("NC")) {
                                                escribir.write(lstdetalle.get(j).getTipoComprobante().substring(0, 1));
                                            } else {
                                                if (lstdetalle.get(j).getTipoComprobante().equalsIgnoreCase("LC")) {
                                                    escribir.write("D");
                                                } else {
                                                    if (lstdetalle.get(j).getTipoComprobante().equalsIgnoreCase("RS")) {
                                                        escribir.write("D");
                                                    } else {
                                                        escribir.write("D");
                                                    }
                                                }
                                            }
                                        }

                                        String nrocomp = lstdetalle.get(j).getNumComprobante();
                                        if (nrocomp.length() == 5) {
                                            nrocomp = "0000000000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 6) {
                                            nrocomp = "000000000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 7) {
                                            nrocomp = "00000000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 8) {
                                            nrocomp = "0000000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 9) {
                                            nrocomp = "000000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 10) {
                                            nrocomp = "00000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 11) {
                                            nrocomp = "0000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 12) {
                                            nrocomp = "000" + nrocomp;
                                        }
                                        if (nrocomp.length() == 13) {
                                            nrocomp = "00" + nrocomp;
                                        }
                                        String montoparcial = "";
                                        if (lstdetalle.get(j).getNomMoneda().equalsIgnoreCase("SOLES")) {
                                            montoparcial = formato.format(lstdetalle.get(j).getMontoPagar()) + "";
                                        } else {
                                            montoparcial = formato.format(lstdetalle.get(j).getMontoPagarDOL()) + "";
                                        }
                                        if (montoparcial.length() == 3) {
                                            montoparcial = "00000000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 4) {
                                            montoparcial = "0000000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 5) {
                                            montoparcial = "000000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 6) {
                                            montoparcial = "00000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 7) {
                                            montoparcial = "0000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 8) {
                                            montoparcial = "000000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 9) {
                                            montoparcial = "00000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 10) {
                                            montoparcial = "0000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 11) {
                                            montoparcial = "000000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 12) {
                                            montoparcial = "00000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 13) {
                                            montoparcial = "0000" + montoparcial;
                                        }
                                        if (montoparcial.length() == 14) {
                                            montoparcial = "000" + montoparcial;
                                        }
                                        escribir.write(nrocomp);
                                        escribir.write(montoparcial);
                                        escribir.write("\r\n");
                                    }
                                }
                            }

                            escribir.close();
                            JOptionPane.showMessageDialog(this, "Se exportÃ³ correctamente el archivo " + nomArchivoCompleto + ".");
                            LProgPagosCabecera lprog = new LProgPagosCabecera();
                            lprog.GrabarExportados(objexp);
                            llenarcab();
                            lstdetalle.removeAll(lstdetalle);
                            listadetalle();
//                        txtruta.setText("");
                        } catch (IOException ex) {
                            System.out.println(ex.getMessage());
                            Logger.getLogger(Exportartxt.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else {
//                    subirArchivoInterbank(formato, archivo, fila, nombrearchivo, objexp);
                    if (validarCuentaBancaria().length() > 0) {
                        JOptionPane.showMessageDialog(this, validarCuentaBancaria());
                    } else {
                        try {
                            FileWriter escribir = new FileWriter(archivo, true);
                            Integer idProgramacion = Integer.parseInt(tbcabprogramacion.getValueAt(fila, 0).toString());
                            ArrayList<ExportacionInterbank> objExpo = new ArrayList<>();
                            LProgPagosCabecera lo = new LProgPagosCabecera();
                            objExpo = lo.ListarExportacionInterbank(idProgramacion);
                            System.out.println(objExpo.size());
                            for (int i = 0; i < objExpo.size(); i++) {
                                escribir.write(objExpo.get(i).getCodReg());
                                escribir.write(objExpo.get(i).getDocProveedor());
                                escribir.write(objExpo.get(i).getCodComprobante());
                                escribir.write(objExpo.get(i).getNumComprobante());
                                escribir.write(objExpo.get(i).getFecha());
                                escribir.write(objExpo.get(i).getMoneda());
                                escribir.write(objExpo.get(i).getMontoAPagar());
                                escribir.write(objExpo.get(i).getIndicadorInterbancario());
                                escribir.write(objExpo.get(i).getTipoabono());
                                escribir.write(objExpo.get(i).getTipoCuenta());
                                escribir.write(objExpo.get(i).getMonedaProgramacion());
                                escribir.write(objExpo.get(i).getCodTienda());
                                escribir.write(objExpo.get(i).getNumeroCuenta());
                                escribir.write(objExpo.get(i).getTipoPersona());
                                escribir.write(objExpo.get(i).getTipoDocumentoIdentidad());
                                escribir.write(objExpo.get(i).getDocumentoIdentidad());
                                escribir.write(objExpo.get(i).getRazonSocial());
                                escribir.write(objExpo.get(i).getEnblanco());
                                escribir.write(objExpo.get(i).getRetencion());
                                escribir.write("\r\n");
                            }

                            escribir.close();
                            JOptionPane.showMessageDialog(this, "Se exportÃ³ correctamente el archivo " + nomArchivoCompleto + ".");
                            LProgPagosCabecera lprog = new LProgPagosCabecera();
                            lprog.GrabarExportados(objexp);
                            llenarcab();
                            lstdetalle.removeAll(lstdetalle);
                            listadetalle();
                        } catch (IOException ex) {
                            System.out.println(ex.getMessage());
                            Logger.getLogger(Exportartxt.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "Ruta Indicada no es vÃ¡lida.");
                txtruta.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione Ruta de Archivo.");
            txtruta.requestFocus();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private String validarCuentaBancaria() {
        String rpta = "";
        for (int i = 0; i < lstdetalle.size(); i++) {
            if (lstdetalle.get(i).getCuentasoles().length() == 0) {
                rpta += "El Nurmero Comprobante NÂ° " + lstdetalle.get(i).getNumComprobante() + " No tiene cuenta bancaria. \r\n ";
            }
        }
        return rpta;
    }
    private void btnsalir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalir1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnsalir1ActionPerformed

    private void tbcabprogramacionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbcabprogramacionMouseReleased
        // TODO add your handling code here:
        int fila = tbcabprogramacion.getSelectedRow();
        if (fila >= 0) {
            LProgPagosCabecera lp = new LProgPagosCabecera();
            lstdetalle = lp.lstdetalleprg(Integer.valueOf(tbcabprogramacion.getValueAt(fila, 0).toString()));
            listadetalle();
            lstconsolidado = lp.buscaConsolidado(Integer.valueOf(tbcabprogramacion.getValueAt(fila, 0).toString()));
        }
    }//GEN-LAST:event_tbcabprogramacionMouseReleased

//    javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
//        String ruta = "";
//        try {
//            jF1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//            if (jF1.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
//                ruta = jF1.getSelectedFile().getAbsolutePath();
//                txtruta.setText(ruta + "\\");
//            }
//        } catch (Exception ex) {
//            ex.getMessage();
//            ex.printStackTrace();
//        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnsalir1;
    private com.toedter.calendar.JDateChooser dcfecha;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblnumdetalleprog;
    private javax.swing.JLabel lblnumscabprog;
    private javax.swing.JTable tbcabprogramacion;
    private javax.swing.JTable tblstdetprogramacion;
    private javax.swing.JTextField txtruta;
    // End of variables declaration//GEN-END:variables
}
